# Converts explanations generated by Psi Networks into easy to read concept-names based explanations

# Helper class to convert to concept-based explanations
class FeatureHelper:
    def __init__(self, sign=None, num=None, concept_name=None):
        self.sign = sign 
        self.concept_name = concept_name
        self.num = num

    def __repr__(self):
        result = ""
        if self.sign is not None:
            if self.sign == -1:
                result += "NOT_"
        if self.concept_name is not None:
            result += f"{self.concept_name}"

        return result

# Helper class to convert to concept-based explanations, gives out easy to read explanations in string
class ExplanationHelper:
    def __init__(self, features):
        self.features = features

    def __repr__(self):
        result = "\n("
        for i in range(len(self.features)):
            feature = self.features[i]
            if feature.sign == 'OR':
                result += ") or ("
                continue
            result += f"{feature}"
            if i+1 < len(self.features) and self.features[i+1].sign != 'OR':
                result += " and "
        result += ")\n"

        return result

# function that uses the above classes to convert feature-name based explanations to concept-name based explanations
def convertToConceptNames(explanation, columns):
    features = [x for x in explanation.split(" ") if x != '&']
    featureList = []
    # iterate over each feature
    for item in features:
        f = FeatureHelper()
        if item[0] == '|':
            f.sign = 'OR' # assign sign as OR for |
            featureList.append(f)
            continue
        if item[-1] == ')':
            item = item[:-1] # if ')' is found, keep as it is
        if item[0] == '(':
            item = item[1:] # if '(' found, ignoring it and retaining everything else
        if item[0] == '~':
            f.sign = -1 # assign sign as -1 for ~
        else:
            f.sign = 1
        f.num = int(item[-2:])
        f.concept_name = columns[f.num]
        featureList.append(f)

    fol_explanation = ExplanationHelper(featureList) #extract explanation 
    return fol_explanation
